name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > application.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run build
        run: ./gradlew build
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_HOST_NAME: ${{ secrets.DB_HOST_NAME }}
          DB_HOST_PASSWORD: ${{ secrets.DB_HOST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}

      - name: Build Docker image
        run: docker build -t pickify-spring:latest .

      - name: Save Docker image as tarball
        run: docker save pickify-spring:latest -o pickify-spring.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: pickify-spring-docker
          path: pickify-spring.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for merge commit
        id: check-merge
        run: |
          if [[ "$(git log -1 --pretty=%B)" != *"Merge pull request"* ]]; then
            echo "Not a merge commit. Skipping deployment."
            echo "skip-deployment=true" >> $GITHUB_ENV
          else
            echo "skip-deployment=false" >> $GITHUB_ENV
          fi

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: pickify-spring-docker
          path: .

      - name: Deploy Docker container to EC2
        if: env.skip-deployment != 'true'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_HOST_NAME: ${{ secrets.DB_HOST_NAME }}
          DB_HOST_PASSWORD: ${{ secrets.DB_HOST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          # Transfer Docker image tarball to the EC2 host
          scp -i private_key.pem -o StrictHostKeyChecking=no pickify-spring.tar $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          # SSH into EC2 to load the image and run the container
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            cd /home/$EC2_USERNAME
            docker load -i pickify-spring.tar
            docker rm -f pickify-spring || true
            docker run -d --name pickify-spring \
              -e DB_URL=${DB_URL} \
              -e DB_HOST_NAME=${DB_HOST_NAME} \
              -e DB_HOST_PASSWORD=${DB_HOST_PASSWORD} \
              -e JWT_SECRET=${JWT_SECRET} \
              -e JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME} \
              -p 8080:8080 \
              pickify-spring:latest
            rm -f pickify-spring.tar
            rm -f private_key.pem
          EOF

