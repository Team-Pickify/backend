name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]  # main 브랜치에 push가 일어날 때 실행
  pull_request:
    branches: [ dev ]  # main 브랜치로 PR 생성 시 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4  # 저장소 코드 체크아웃
        with:
          fetch-depth: 0  # 전체 Git 기록을 가져옴

      - name: Set up JDK 21  # Java 개발 킷 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml  # application.yml 파일 생성
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: |
          chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run build (Thin JAR)
        run: ./gradlew clean build

        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_HOST_NAME: ${{ secrets.DB_HOST_NAME }}
          DB_HOST_PASSWORD: ${{ secrets.DB_HOST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}

      - name: Upload Thin JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: pickify-thin-jar
          path: build/libs/*.jar

  deploy:
    needs: build  # build 작업이 성공적으로 완료된 후 실행
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 Git 기록 가져오기

      - name: Check for merge commit  # Merge commit 확인
        id: check-merge
        run: |
          if [[ "$(git log -1 --pretty=%B)" != *"Merge pull request"* ]]; then
            echo "Not a merge commit. Skipping deployment."
            echo "skip-deployment=true" >> $GITHUB_ENV
          else
            echo "skip-deployment=false" >> $GITHUB_ENV
          fi

      - name: Download build artifact  # 이전 단계에서 업로드한 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: pickify-spring
          path: build/libs/

      - name: Deploy Thin JAR to EC2
        if: env.skip-deployment != 'true'
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_HOST_NAME: ${{ secrets.DB_HOST_NAME }}
          DB_HOST_PASSWORD: ${{ secrets.DB_HOST_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # JAR 파일 경로 찾기
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)

          # EC2에 JAR 파일 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/pickify-thin.jar

          # EC2에 SSH로 접속 후 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            export DB_URL=${DB_URL}
            export DB_HOST_NAME=${DB_HOST_NAME}
            export DB_HOST_PASSWORD=${DB_HOST_PASSWORD}
            export JWT_SECRET=${JWT_SECRET}
            export JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME}

            # 실행 중인 Java 프로세스 종료
            pgrep java | xargs -r kill -15
            sleep 3

            # Thin JAR 실행을 위한 의존성 디렉터리 설정
            mkdir -p /home/$EC2_USERNAME/thin-libs

            # Thin JAR 실행 (의존성을 thin-libs에 저장)
            nohup java -Dthin.root=/home/$EC2_USERNAME/thin-libs -jar /home/$EC2_USERNAME/pickify-thin.jar > app.log 2>&1 &
          EOF

          rm -f private_key.pem
